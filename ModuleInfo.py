from .. import loader, utils
from time import time
import asyncio
import re
import json
import requests

@loader.tds
class modInfoMod(loader.Module):
    strings = {"name": "ModuleInfo"}

    def __init__(self):
        self.config = loader.ModuleConfig("maximum_fw_error", 5, lambda: "–ü–æ—Ä–æ–≥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç FloodWait")

    async def modinfocmd(self, message):
        """.modinfo <reply_to_file|file> - Check the file for malisious code"""
        TEMPLATE = "üëÆ‚Äç‚ôÇÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {0}</b>\n\n<b>üëÄ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:</b>\n{1}\n{2}"
        reply = await message.get_reply_message()
        if not reply and type(message.media) is None:
            await message.edit("<b>–ú–Ω–µ –∫–∞–∫–æ–π —Ñ–∞–π–ª –ø—Ä–æ–≤–µ—Ä—è—Ç—å, –Ω–µ –ø–æ–¥—Å–∫–∞–∂–µ—à—å?... üóø</b>")
            return
        if not reply:
            media = message.media
        else:
            media = reply.media

        file = await message.client.download_file(media)
        try:
            code = file.decode('utf-8').replace('\r\n', '\n')
        except:
            await message.edit('<b>–ù–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª...</b>')
            await asyncio.sleep(3)
            await message.delete()
            return

        filter_regex = {
            ('DeleteAccou' + 'ntRequest'): r'[dD].*[eE].*[lL].*[eE].*[tT].*[eE].*[aA].*[cC].*[oO].*[uU].*[nN].*[tT].*[rR].*[eE].*[qQ].*[uU].*[eE].*[sS].*[tT]', 
            'ChangePhoneRequest': r'[CC].*[hH].*[aA].*[nN].*[gG].*[eE].*[PP].*[hH].*[oO].*[nN].*[eE].*[RR].*[eE].*[qQ].*[uU].*[eE].*[sS].*[tT]', 
            'FinishTakeoutSession': r'[fF].*[iI].*[nN].*[iI].*[sS].*[hH].*[TT].*[aA].*[kK].*[eE].*[oO].*[uU].*[tT].*[SS].*[eE].*[sS].*[sS].*[iI].*[oO].*[nN]', 
            'SetAccountTTL': r'[sS].*[eE].*[tT].*[AA].*[cC].*[cC].*[oO].*[uU].*[nN].*[tT].*[TT].*[TT].*[LL].*[RR].*[eE].*[qQ].*[uU].*[eE].*[sS].*[tT]', 
            'UpdatePasswordSettings': r'[uU].*[pP].*[dD].*[aA].*[tT].*[eE].*[PP].*[aA].*[sS].*[sS].*[wW].*[oO].*[rR].*[dD].*[SS].*[eE].*[tT].*[tT].*[iI].*[nN].*[gG].*[sS]', 
            'GetAllSecureValuesRequest': r'[GG].*[eE].*[tT].*[AA].*[lL].*[lL].*[SS].*[eE].*[cC].*[uU].*[rR].*[eE].*[VV].*[aA].*[lL].*[uU].*[eE].*[sS].*[RR].*[eE].*[qQ].*[uU].*[eE].*[sS].*[tT]',
            'client.phone': r'[.]phone[^_]',
            'client.session': r'[.]session[^_]',
            'StringSession': r'StringSession',
        }

        try:
            mod_name = re.search(r"""strings[ ]*=[ ]*{.*?name['"]:[ ]*['"](.*?)['"]""", code, re.S).group(1)
        except:
            mod_name = "Unknown"

        import_regex = [r'^[^#]rom ([^\n\r]*) import [^\n\r]*$', r'^[^#]mport ([^\n\r]*)[^\n\r]*$', r"""__import__[(]['"]([^'"]*)['"][)]"""]
        imports = []
        for import_re in import_regex:
            imports = imports + re.findall(import_re, code, flags=re.M|re.DOTALL)

        if '..' in imports:
            del imports[imports.index('..')]

        imports_formatted = ""
        for dependency in imports:
            imports_formatted += f"    ‚ñ´Ô∏è {dependency}\n"

        if len(imports) == 0:
            imports_formatted = "<i>–ù–µ—Ç</i>"

        comments = ""

        if 'requests' in imports:
            comments += "üîÖ –ù–∞–π–¥–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ <b>requests</b>. –û–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è —Å–ª–∏–≤–∞ —Å–µ—Å—Å–∏–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥.\n"
        if 'urllib' in imports:
            comments += "üîÖ –ù–∞–π–¥–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ <b>urllib</b>. –û–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è —Å–ª–∏–≤–∞ —Å–µ—Å—Å–∏–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥.\n"
        if 'urllib3' in imports:
            comments += "üîÖ –ù–∞–π–¥–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ <b>urllib3</b>. –û–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è —Å–ª–∏–≤–∞ —Å–µ—Å—Å–∏–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥.\n"
        if 'base64' in imports:
            comments += "üîÖ –ù–∞–π–¥–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ <b>base64</b>. –û–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –∫–æ–¥–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.\n"
        if 'while True' in code or 'while 1' in code:
            comments += "üîÖ –ù–∞–π–¥–µ–Ω <b>–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª</b>. –ó–∞—á–∞—Å—Ç—É—é —ç—Ç–æ –ø–ª–æ—Ö–æ —Å–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞.\n"
        if '.edit(' in code:
            comments += "üîÖ –ù–∞–π–¥–µ–Ω–æ <b>–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π</b>. –î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å —Ç–≤–∏–Ω–∫–∞.\n"
        if re.search(r'@.*?[bB][oO][tT]', code) is not None:
            comments += "üîÖ –ù–∞–π–¥–µ–Ω <b>–ë–æ—Ç-–∞–±—å—é–∑</b>. –î–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å —É–º—Ä–µ—Ç –≤–º–µ—Å—Ç–µ —Å –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º –±–æ—Ç–æ–º.\n"

        for comm, regex in filter_regex.items():
            if re.search(regex, code) is not None:
                comments = "üö´ –ù–∞–π–¥–µ–Ω –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –∫–æ–¥ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É <code>" + comm + "</code>!\n" + comments

        functions = {}
        watching_function = False
        cmd_name = ""
        for line in code.split('\n'):
            if len(line) <= 1:
                continue
            if not watching_function:
                match = re.search(r'[\t ]*?def (.*?)cmd.*', line)
                if match is not None:
                    cmd_name = match.group(1)
                else:
                    continue

                num_of_tabs = 0
                i = 0
                while line[i:][:4] == "    " or line[i] == '\t':
                    num_of_tabs += 1
                    i += 1
                    if line[i - 1:][:4] == "    ":
                        i += 3

                num_of_tabs += 1
                watching_function = True
            else:
                current_tabs = 0
                i = 0
                while len(line) > i and ((len(line) > 5 and line[i:][:4] == "    ") or line[i] == '\t'):
                    current_tabs += 1
                    i += 1
                    if line[i - 1:][:4] == "    ":
                        i += 3

                if current_tabs >= num_of_tabs:
                    if cmd_name not in functions:
                        functions[cmd_name] = ""
                    functions[cmd_name] += line + '\n'
                else:
                    watching_function = False

        for func_name, func_code in functions.items():
            number_of_occurencies = func_code.count('.answer(') + func_code.count('.edit(') + func_code.count('.delete(') + func_code.count('.send(')
            if number_of_occurencies >= self.config['maximum_fw_error']:
                comments += f"‚è± –í —Ñ—É–Ω–∫—Ü–∏–∏ <b>{func_name}</b> –Ω–∞–π–¥–µ–Ω <b>–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π</b> FloodWait. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: <b>{number_of_occurencies}</b>\n"


        await utils.answer(message, TEMPLATE.format(mod_name, imports_formatted, comments))


